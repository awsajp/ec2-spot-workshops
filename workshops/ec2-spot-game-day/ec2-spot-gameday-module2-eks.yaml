AWSTemplateFormatVersion: 2010-09-09
Description: >-
  EKS cluster (dedicated VPC: true, dedicated IAM: true) [created and managed by
  eksctl]

Parameters:
  BootstrapArguments:
    Type: String
    Default: "--kubelet-extra-args --node-labels=alpha.eksctl.io/cluster-name=Ec2SpotEKS,alpha.eksctl.io/nodegroup-name=Ec2SpotEKS,lifecycle=OnDemand,intent=control-apps"
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 0

  NodeAutoScalingGroupDesiredSize:
    Type: Number
    Description: Desired size of Node Group ASG.
    Default: 2

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 10

  OnDemandBaseCapacity:
    Type: Number
    Description: "on-demand base capacity"
    Default: 2
  OnDemandPercentageAboveBaseCapacity:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"
    Default: 100
  InstanceTypesOverride:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"
    Default: "t3.large,m5.large"


Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.0.0/24
    public-subnet-2:
      CIDR: 10.0.1.0/24
    public-subnet-3:
      CIDR: 10.0.2.0/24
    public-subnet-4:
      CIDR: 10.0.3.0/24
    public-subnet-5:
      CIDR: 10.0.4.0/24
    public-subnet-6:
      CIDR: 10.0.5.0/24
    private-subnet-1:
      CIDR: 10.0.6.0/24
    private-subnet-2:
      CIDR: 10.0.7.0/24
    private-subnet-3:
      CIDR: 10.0.8.0/24
    private-subnet-4:
      CIDR: 10.0.9.0/24
    private-subnet-5:
      CIDR: 10.0.10.0/24
    private-subnet-6:
      CIDR: 10.0.11.0/24
    vpc:
      CIDR: 10.0.0.0/16


  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com

Resources:

  ClusterSharedNodeSecurityGroup:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ClusterSharedNodeSecurityGroup'
      VpcId: !Ref VPC

  ControlPlane:
    DependsOn:
      - ServiceRole
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: Ec2SpotEKS
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref SubnetPublicUSEAST1A
          - !Ref SubnetPublicUSEAST1B
          - !Ref SubnetPublicUSEAST1C
          - !Ref SubnetPublicUSEAST1D
          - !Ref SubnetPublicUSEAST1F
          - !Ref SubnetPrivateUSEAST1A
          - !Ref SubnetPrivateUSEAST1B
          - !Ref SubnetPrivateUSEAST1C
          - !Ref SubnetPrivateUSEAST1D
          - !Ref SubnetPrivateUSEAST1F

      RoleArn: !GetAtt ServiceRole.Arn
      Version: '1.16'

  ControlPlaneSecurityGroup:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VPC

  IngressDefaultClusterToNodeSG:
    DependsOn:
      - ClusterSharedNodeSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      ToPort: 65535

  IngressInterNodeGroupSG:
    DependsOn:
      - ClusterSharedNodeSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535

  IngressNodeToDefaultClusterSG:
    DependsOn:
      - ClusterSharedNodeSecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'

  NATGateway:
    DependsOn:
      - SubnetPublicUSEAST1A
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATIP.AllocationId
      SubnetId: !Ref SubnetPublicUSEAST1A
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/NATGateway'

  NATIP:
    DependsOn:
      - VPC
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NATPrivateSubnetRouteUSEAST1C:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
  PolicyCloudWatchMetrics:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref ServiceRole
  PolicyNLB:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticloadbalancing:*'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:Describe*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyNLB'
      Roles:
        - !Ref ServiceRole

  PrivateRouteTable:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable'
      VpcId: !Ref VPC

  PublicRouteTable:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref VPC

  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
      - PublicRouteTable


  RouteTableAssociationPrivateUSEAST1A:
    DependsOn:
      - PrivateRouteTable
      - SubnetPublicUSEAST1A
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateUSEAST1A

  RouteTableAssociationPrivateUSEAST1B:
    DependsOn:
      - PrivateRouteTable
      - SubnetPublicUSEAST1B
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateUSEAST1B

  RouteTableAssociationPrivateUSEAST1C:
    DependsOn:
      - PrivateRouteTable
      - SubnetPublicUSEAST1C
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateUSEAST1C

  RouteTableAssociationPrivateUSEAST1D:
    DependsOn:
      - PrivateRouteTable
      - SubnetPublicUSEAST1D
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateUSEAST1D

  RouteTableAssociationPrivateUSEAST1F:
    DependsOn:
      - PrivateRouteTable
      - SubnetPublicUSEAST1F
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateUSEAST1F

  RouteTableAssociationPublicUSEAST1A:
    DependsOn:
      - PublicRouteTable
      - SubnetPublicUSEAST1A
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1A

  RouteTableAssociationPublicUSEAST1B:
    DependsOn:
      - PublicRouteTable
      - SubnetPublicUSEAST1B
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1B

  RouteTableAssociationPublicUSEAST1C:
    DependsOn:
      - PublicRouteTable
      - SubnetPublicUSEAST1C
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1C

  RouteTableAssociationPublicUSEAST1D:
    DependsOn:
      - PublicRouteTable
      - SubnetPublicUSEAST1D
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1D

  RouteTableAssociationPublicUSEAST1F:
    DependsOn:
      - PublicRouteTable
      - SubnetPublicUSEAST1F
      - VPCGatewayAttachment
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicUSEAST1F

  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "Ec2SpotEKS-ServiceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKS
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKSFargatePods
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'

  SubnetPrivateUSEAST1A:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-1
          - CIDR
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - private subnet 1'
      VpcId: !Ref VPC

  SubnetPrivateUSEAST1B:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-2
          - CIDR
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - private subnet 2'
      VpcId: !Ref VPC

  SubnetPrivateUSEAST1C:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-3
          - CIDR
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - private subnet 3'
      VpcId: !Ref VPC


  SubnetPrivateUSEAST1D:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 3
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-4
          - CIDR
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - private subnet 4'
      VpcId: !Ref VPC


  SubnetPrivateUSEAST1E:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 4
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-5
          - CIDR
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - private subnet 5'
      VpcId: !Ref VPC


  SubnetPrivateUSEAST1F:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 5
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - private-subnet-6
          - CIDR
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - private subnet 6'
      VpcId: !Ref VPC

  SubnetPublicUSEAST1A:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-1
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - public subnet 1'
      VpcId: !Ref VPC

  SubnetPublicUSEAST1B:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-2
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - public subnet 2'
      VpcId: !Ref VPC

  SubnetPublicUSEAST1C:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-3
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - public subnet 3'
      VpcId: !Ref VPC

  SubnetPublicUSEAST1D:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 3
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-4
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - public subnet 4'
      VpcId: !Ref VPC

  SubnetPublicUSEAST1E:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 4
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-5
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - public subnet 5'
      VpcId: !Ref VPC

  SubnetPublicUSEAST1F:
    DependsOn:
      - VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 5
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - public-subnet-6
          - CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: Name
          Value: 'Ec2SpotEKS - public subnet 6'
      VpcId: !Ref VPC

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Fn::FindInMap:
          - CidrMappings
          - vpc
          - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Ec2SpotEKS
          
  VPCGatewayAttachment:
    DependsOn:
      - VPC
      - InternetGateway
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC



  EgressInterCluster:
    DependsOn:
      - ControlPlaneSecurityGroup
      - SG
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group
        Ec2SpotEKS (kubelet and workload TCP ports)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 1025
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  EgressInterClusterAPI:
    DependsOn:
      - ControlPlaneSecurityGroup
      - SG
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: >-
        Allow control plane to communicate with worker nodes in group
        Ec2SpotEKS (workloads using HTTPS port, commonly used with extension
        API servers)
      DestinationSecurityGroupId: !Ref SG
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  IngressInterCluster:
    DependsOn:
      - ControlPlaneSecurityGroup
      - SG
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow worker nodes in group Ec2SpotEKS to communicate with control
        plane (kubelet and workload TCP ports)
      FromPort: 1025
      GroupId: !Ref SG
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 65535
  IngressInterClusterAPI:
    DependsOn:
      - ControlPlaneSecurityGroup
      - SG
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow worker nodes in group Ec2SpotEKS to communicate with control
        plane (workloads using HTTPS port, commonly used with extension API
        servers)
      FromPort: 443
      GroupId: !Ref SG
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      ToPort: 443
  IngressInterClusterCP:
    DependsOn:
      - ControlPlaneSecurityGroup
      - SG
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow control plane to receive API requests from worker nodes in group
        Ec2SpotEKS
      FromPort: 443
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref SG
      ToPort: 443

  NodeGroup:
    DependsOn:
      - NodeGroupLaunchTemplate
      - ControlPlane
      - SubnetPublicUSEAST1A
      - SubnetPublicUSEAST1B
      - SubnetPublicUSEAST1C
      - SubnetPublicUSEAST1D
      - SubnetPublicUSEAST1F
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: "Ec2SpotEKS"
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredSize
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NodeGroupLaunchTemplate
            # LaunchTemplateName: String
            Version: !GetAtt NodeGroupLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride ] ]
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: Ec2SpotEKS
        - Key: kubernetes.io/cluster/Ec2SpotEKS
          PropagateAtLaunch: 'true'
          Value: owned
        - Key: k8s.io/cluster-autoscaler/enabled
          PropagateAtLaunch: 'true'
          Value: 'true'
        - Key: k8s.io/cluster-autoscaler/Ec2SpotEKS
          PropagateAtLaunch: 'true'
          Value: owned
        - Key: alpha.eksctl.io/cluster-name
          PropagateAtLaunch: 'true'
          Value: Ec2SpotEKS
        - Key: alpha.eksctl.io/nodegroup-name
          PropagateAtLaunch: 'true'
          Value: Ec2SpotEKS
        - Key: alpha.eksctl.io/nodegroup-type
          PropagateAtLaunch: 'true'
          Value: unmanaged
        - Key: aws:cloudformation:logical-id
          PropagateAtLaunch: 'true'
          Value: NodeGroup
        - Key: eksctl.cluster.k8s.io/v1alpha1/cluster-name
          PropagateAtLaunch: 'true'
          Value: Ec2SpotEKS
        - Key: eksctl.io/v1alpha2/nodegroup-name
          PropagateAtLaunch: 'true'
          Value: Ec2SpotEKS
      VPCZoneIdentifier:
        - !Ref SubnetPublicUSEAST1A
        - !Ref SubnetPublicUSEAST1B
        - !Ref SubnetPublicUSEAST1C
        - !Ref SubnetPublicUSEAST1D
        - !Ref SubnetPublicUSEAST1F
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '0'

  NodeGroupLaunchTemplate:
    DependsOn:
      - NodeInstanceProfile
      - ClusterSharedNodeSecurityGroup
      - SG
      - ControlPlane
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              VolumeSize: 80
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: ami-0ee0652ac0722f0e3
        InstanceType: m5.large
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref ClusterSharedNodeSecurityGroup
              - !Ref SG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh Ec2SpotEKS ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
      LaunchTemplateName: 'Ec2SpotEKS'


  NodeInstanceProfile:
    DependsOn:
      - NodeInstanceRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "Ec2SpotEKS-NodeInstanceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
      Path: /
  PolicyALBIngress:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'acm:DescribeCertificate'
              - 'acm:ListCertificates'
              - 'acm:GetCertificate'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:CreateTags'
              - 'ec2:DeleteTags'
              - 'ec2:DeleteSecurityGroup'
              - 'ec2:DescribeAccountAttributes'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeInternetGateways'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeSecurityGroups'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeVpcs'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:ModifyNetworkInterfaceAttribute'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'elasticloadbalancing:AddListenerCertificates'
              - 'elasticloadbalancing:AddTags'
              - 'elasticloadbalancing:CreateListener'
              - 'elasticloadbalancing:CreateLoadBalancer'
              - 'elasticloadbalancing:CreateRule'
              - 'elasticloadbalancing:CreateTargetGroup'
              - 'elasticloadbalancing:DeleteListener'
              - 'elasticloadbalancing:DeleteLoadBalancer'
              - 'elasticloadbalancing:DeleteRule'
              - 'elasticloadbalancing:DeleteTargetGroup'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:DescribeListenerCertificates'
              - 'elasticloadbalancing:DescribeListeners'
              - 'elasticloadbalancing:DescribeLoadBalancers'
              - 'elasticloadbalancing:DescribeLoadBalancerAttributes'
              - 'elasticloadbalancing:DescribeRules'
              - 'elasticloadbalancing:DescribeSSLPolicies'
              - 'elasticloadbalancing:DescribeTags'
              - 'elasticloadbalancing:DescribeTargetGroups'
              - 'elasticloadbalancing:DescribeTargetGroupAttributes'
              - 'elasticloadbalancing:DescribeTargetHealth'
              - 'elasticloadbalancing:ModifyListener'
              - 'elasticloadbalancing:ModifyLoadBalancerAttributes'
              - 'elasticloadbalancing:ModifyRule'
              - 'elasticloadbalancing:ModifyTargetGroup'
              - 'elasticloadbalancing:ModifyTargetGroupAttributes'
              - 'elasticloadbalancing:RegisterTargets'
              - 'elasticloadbalancing:RemoveListenerCertificates'
              - 'elasticloadbalancing:RemoveTags'
              - 'elasticloadbalancing:SetIpAddressType'
              - 'elasticloadbalancing:SetSecurityGroups'
              - 'elasticloadbalancing:SetSubnets'
              - 'elasticloadbalancing:SetWebACL'
              - 'iam:CreateServiceLinkedRole'
              - 'iam:GetServerCertificate'
              - 'iam:ListServerCertificates'
              - 'waf-regional:GetWebACLForResource'
              - 'waf-regional:GetWebACL'
              - 'waf-regional:AssociateWebACL'
              - 'waf-regional:DisassociateWebACL'
              - 'tag:GetResources'
              - 'tag:TagResources'
              - 'waf:GetWebACL'
              - 'wafv2:GetWebACL'
              - 'wafv2:GetWebACLForResource'
              - 'wafv2:AssociateWebACL'
              - 'wafv2:DisassociateWebACL'
              - 'shield:DescribeProtection'
              - 'shield:GetSubscriptionState'
              - 'shield:DeleteProtection'
              - 'shield:CreateProtection'
              - 'shield:DescribeSubscription'
              - 'shield:ListProtections'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyALBIngress'
      Roles:
        - !Ref NodeInstanceRole

  PolicyAutoScaling:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:DescribeAutoScalingInstances'
              - 'autoscaling:DescribeLaunchConfigurations'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'ec2:DescribeLaunchTemplateVersions'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyAutoScaling'
      Roles:
        - !Ref NodeInstanceRole
  SG:
    DependsOn:
      - VPC
      - ControlPlane
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Communication between the control plane and worker nodes in group
        Ec2SpotEKS
      Tags:
        - Key: kubernetes.io/cluster/Ec2SpotEKS
          Value: owned
        - Key: Name
          Value: !Sub '${AWS::StackName}/SG'
      VpcId: !Ref VPC



Outputs:
  ARN:
    Export:
      Name: !Sub '${AWS::StackName}::ARN'
    Value: !GetAtt ControlPlane.Arn
  CertificateAuthorityData:
    Value: !GetAtt ControlPlane.CertificateAuthorityData
  ClusterSecurityGroupId:
    Export:
      Name: !Sub '${AWS::StackName}::ClusterSecurityGroupId'
    Value: !GetAtt ControlPlane.ClusterSecurityGroupId
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Export:
      Name: !Sub '${AWS::StackName}::Endpoint'
    Value: !GetAtt ControlPlane.Endpoint
  FeatureNATMode:
    Value: Single
  SecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SecurityGroup'
    Value: !Ref ControlPlaneSecurityGroup
  ServiceRoleARN:
    Export:
      Name: !Sub '${AWS::StackName}::ServiceRoleARN'
    Value: !GetAtt ServiceRole.Arn
  SharedNodeSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SharedNodeSecurityGroup'
    Value: !Ref ClusterSharedNodeSecurityGroup
  SubnetsPrivate:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPrivate'
    Value: !Join
      - ','
      - - !Ref SubnetPrivateUSEAST1A
        - !Ref SubnetPrivateUSEAST1B
        - !Ref SubnetPrivateUSEAST1C
        - !Ref SubnetPrivateUSEAST1D
        - !Ref SubnetPrivateUSEAST1F

  SubnetsPublic:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPublic'
    Value: !Join
      - ','
      - - !Ref SubnetPublicUSEAST1A
        - !Ref SubnetPublicUSEAST1B
        - !Ref SubnetPublicUSEAST1C
        - !Ref SubnetPublicUSEAST1D
        - !Ref SubnetPublicUSEAST1F
  VPC:
    Export:
      Name: !Sub '${AWS::StackName}::VPC'
    Value: !Ref VPC

  NodeInstanceRole:
    Export:
      Name: !Sub '${AWS::StackName}::NodeInstanceRole'
    Value: !Ref NodeInstanceRole





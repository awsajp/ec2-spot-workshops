---
AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Spot Game Day Template

Metadata:
  Author:
    Description: Jayaprakash Alawala <jalawala@amazon.com>
  License:
    Description: 'Copyright 2020 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'


Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'SpotGameDay'
    MinLength: 1

  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh/http access and load balancer http
      access
    Type: String
  NodeAutoScalingGroupDesiredSize:
    Type: Number
    Description: Desired size of Node Group ASG.
    Default: 2
    
  OnDemandBaseCapacity:
    Type: Number
    Description: "on-demand base capacity"
    Default: 2
    
  OnDemandPercentageAboveBaseCapacity:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"
    Default: 100
    
  SpotInstancePools:
    Type: Number
    Description: "spot instance pools(1-20)"
    Default: 2

  InstanceTypesOverride:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"
    Default: "t3.large,m5.large"

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 0

  NodeAutoScalingGroupDesiredSize:
    Type: Number
    Description: Desired size of Node Group ASG.
    Default: 2

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 10

  AMAZONLINUX2AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: SpotGameDay

  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - vpc

  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc


  publicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Spot GameDay - public subnet 1
      VpcId: !Ref vpc

  publicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Spot GameDay - public subnet 2
      VpcId: !Ref vpc

  publicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Spot GameDay - public subnet 3
      VpcId: !Ref vpc

  publicSubnet4:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 3
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Spot GameDay - public subnet 4
      VpcId: !Ref vpc

  publicSubnet5:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 4
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Spot GameDay - public subnet 5
      VpcId: !Ref vpc

  publicSubnet6:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 5
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.5.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Spot GameDay - public subnet 6
      VpcId: !Ref vpc


  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: Spot GameDay - private subnet 1
      VpcId: !Ref vpc


  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.7.0/24
      Tags:
        - Key: Name
          Value: Spot GameDay - private subnet 2
      VpcId: !Ref vpc

  privateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.8.0/24
      Tags:
        - Key: Name
          Value: Spot GameDay - private subnet 3
      VpcId: !Ref vpc


  publicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - vpc
      - attachGateway
    Properties:
      Tags:
        - Key: Name
          Value: Spot GameDay - public route table
      VpcId: !Ref vpc

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    DependsOn: vpc
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: Spot GameDay - private route table

  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet1
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet2
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2

  publicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet3
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet3

  publicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet4
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet4

  publicSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet5
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet5

  publicSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet6
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet6

  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet1
    # DependedOn: None
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet1

  privateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet2
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet2

  privateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet3
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet3


  EIPNATGateway:
    Type: AWS::EC2::EIP
    DependsOn:
      - attachGateway
      - vpc
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - publicSubnet1
    # DependedOn:
    Properties:
      AllocationId: !GetAtt EIPNATGateway.AllocationId
      SubnetId: !Ref publicSubnet1

  publicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - publicRouteTable
      - internetGateway
      - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  privateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivate
      - NATGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref RouteTablePrivate

  autoScalingServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: autoscaling.amazonaws.com
      Description: Default Service-Linked Role enables access to AWS Services and Resources
        used or managed by Auto Scaling

  ec2FleetServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: ec2fleet.amazonaws.com
      Description: Default EC2 Fleet Service Linked Role

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - vpc
    Properties:
      GroupDescription: Allow http (80)
      SecurityGroupIngress:
        - CidrIp: !Ref sourceCidr
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref vpc

  SpotGameDayALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - loadBalancerSecurityGroup
      - publicSubnet1
      - publicSubnet2
      - publicSubnet3
      - publicSubnet4
      - publicSubnet5
      - publicSubnet6
    Properties:
      Name: SpotGameDay
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
        - !Ref publicSubnet3
        - !Ref publicSubnet4
        - !Ref publicSubnet5
        - !Ref publicSubnet6

  SpotGameDayTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - vpc
    Properties:
      HealthCheckIntervalSeconds: 50
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: SpotGameDay
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId: !Ref vpc

  SpotGameDayALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - SpotGameDayALB
      - SpotGameDayTG
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SpotGameDayTG
      LoadBalancerArn: !Ref SpotGameDayALB
      Port: 80
      Protocol: HTTP

  instanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "SpotGameDay-InstanceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: EC2DescribeInstances
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:DescribeInstances
                Resource: "*"

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - instanceRole
    Properties:
      InstanceProfileName: "SpotGameDay-InstanceProfile"
      Path: /
      Roles:
        - Ref: instanceRole

  instanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Allow traffic Only from ALB
      GroupName: "SpotGameDay-InstanceSG"
      VpcId: !Ref vpc

  instanceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
    - instanceSecurityGroup
    - loadBalancerSecurityGroup
    Properties:
      FromPort: 80
      GroupId: !Ref instanceSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref loadBalancerSecurityGroup
      ToPort: 80

  SpotGameDayLT:
    DependsOn:
      - instanceProfile
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.large
        KeyName : !Ref KeyName
        ImageId: !Ref AMAZONLINUX2AMI
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn
        SecurityGroupIds:
          - !Ref instanceSecurityGroup

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: "SpotGameDay"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y

            sudo yum -y install python3 python3-wheel python-pi

            cat <<EOF > requirements.txt
            Flask==0.10.1
            Flask-Cors==1.10.2
            requests
            boto3
            EOF

            sudo pip3 install -r requirements.txt


            cat <<EOF > app.py
            from flask import Flask, render_template
            from flask.ext.cors import CORS, cross_origin
            import os
            import requests
            import json
            import time
            import sys
            import boto3


            app = Flask(__name__)
            cors = CORS(app)
            app.config['CORS_HEADERS'] = 'Content-Type'


            @app.route('/')
            @cross_origin()
            def index():

              response = ""
              response +="<head> <title>Spot Game Day</title> </head>"
              response += "<h2>I am a Simple Web App Running with below Attributes </h2> <hr/>"

              try:
                URL = "http://169.254.169.254/latest/meta-data/spot/termination-time"
                SpotInt = requests.get(URL)
                if SpotInt.status_code == 200:
                  response += "<h1>This Spot Instance Got Interruption and Termination Time is {} </h1> <hr/>".format(SpotInt.text)


                URL = "http://169.254.169.254/latest/dynamic/instance-identity/document"
                InstanceData = requests.get(URL).json()

                instanceId = InstanceData['instanceId']
                response += "<li>My instance_id = {}</li>".format(instanceId)
                lifecycle = getInstanceLifecycle(instanceId, InstanceData['region'])
                response += "<li>My Instance lifecycle = {}</li>".format(lifecycle)
                response += "<li>My instance_type = {}</li>".format(InstanceData['instanceType'])
                response += "<li>My Intance private_ipv4 = {}</li>".format(InstanceData['privateIp'])
                response += "<li>My availability_zone = {}</li>".format(InstanceData['availabilityZone'])
                response += "<li>My Region = {}</li>".format(InstanceData['region'])

                publicIp = requests.get("http://169.254.169.254/latest/meta-data/public-ipv4")
                response += "<li>My instance_type public_ipv4 = {}</li>".format(publicIp.text)
                AMIIndexId = requests.get("http://169.254.169.254/latest/meta-data/ami-launch-index")
                response += "<li>My ami_launch_index = {}</li>".format(AMIIndexId.text)

                AMIId = requests.get("http://169.254.169.254/latest/meta-data/ami-id")
                response += "<li>My ami_launch_index = {}</li>".format(AMIId.text)

                MacId = requests.get("http://169.254.169.254/latest/meta-data/mac")
                Mac = MacId.text

                URL = "http://169.254.169.254/latest/meta-data/network/interfaces/macs/" + str(MacId.text) + "/subnet-id"
                SubnetId = requests.get(URL)
                response += "<li>My subnet_id = {}</li>".format(SubnetId.text)

                URL = "http://169.254.169.254/latest/meta-data/network/interfaces/macs/" + str(MacId.text) + "/vpc-id"
                VPCId = requests.get(URL)
                response += "<li>My vpc_id = {}</li>".format(VPCId.text)


              except Exception as inst:
                response += "<li>Oops !!! Failed to access my instance  metadata with error = {}</li>".format(inst)

              return response

            def getInstanceLifecycle(instanceId, region):
              ec2client = boto3.client('ec2', region_name=region)
              describeInstance = ec2client.describe_instances(InstanceIds=[instanceId])
              instanceData=describeInstance['Reservations'][0]['Instances'][0]
              if 'InstanceLifecycle' in instanceData.keys():
                return instanceData['InstanceLifecycle']
              else:
                return "Ondemand"

            if __name__ == '__main__':
              print("Starting A Simple Web Service ...")
              app.run(port=80,host='0.0.0.0')

            EOF

            python3 app.py
      LaunchTemplateName: "SpotGameDay"

  SpotGameDayASG:
    DependsOn:
      - SpotGameDayLT
      - publicSubnet1
      - publicSubnet2
      - publicSubnet3
      - publicSubnet4
      - publicSubnet5
      - publicSubnet6
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "SpotGameDay"
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredSize
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: !Ref SpotInstancePools
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref SpotGameDayLT
            Version: !GetAtt SpotGameDayLT.LatestVersionNumber
          Overrides:
            - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride ] ]
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        - !Ref publicSubnet1
        - !Ref publicSubnet2
        - !Ref publicSubnet3
        - !Ref publicSubnet4
        - !Ref publicSubnet5
        - !Ref publicSubnet6
      TargetGroupARNs:
        - !Ref SpotGameDayTG
      Tags:
        - Key: Name
          Value: "SpotGameDay"
          PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredSize
        MaxBatchSize: '1'
        PauseTime: 'PT5M'


Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value: !Ref AWS::Region

  instanceProfile:
    Description: Instance profile ARN
    Value:
      Fn::GetAtt:
        - instanceProfile
        - Arn

  instanceSecurityGroup:
    Description: Instance security group
    Value: !Ref instanceSecurityGroup

  loadBalancerSecurityGroup:
    Description: Load Balancer security group
    Value: !Ref loadBalancerSecurityGroup

  publicSubnet1:
    Description: Public subnet 1
    Value: !Ref publicSubnet1

  publicSubnet2:
    Description: Public subnet 2
    Value: !Ref publicSubnet2

  publicSubnet3:
    Description: Public subnet 3
    Value: !Ref publicSubnet3

  publicSubnet4:
    Description: Public subnet 4
    Value: !Ref publicSubnet4

  publicSubnet5:
    Description: Public subnet 5
    Value: !Ref publicSubnet5

  publicSubnet6:
    Description: Public subnet 6
    Value: !Ref publicSubnet6

  privateSubnet1:
    Description: Private subnet 1
    Value: !Ref privateSubnet1

  privateSubnet2:
    Description: Private subnet 2
    Value: !Ref privateSubnet2

  privateSubnet3:
    Description: Private subnet 3
    Value: !Ref privateSubnet3

  vpc:
    Description: The VPC
    Value: !Ref vpc

  ASG:
    Description: The Autoscaling Group
    Value: !Ref SpotGameDayASG

  SpotGameDayLT:
    Description: The Launch Template
    Value: !Ref SpotGameDayLT

  SpotGameDayALBDNSName:
    Description: The Application Load Balancer
    Value: !GetAtt SpotGameDayALB.DNSName

  SpotGameDayTG:
    Description: The Target Group
    Value: !Ref SpotGameDayTG

  VPCPublicSubnets:
    Description:  The list of public subnets in the VPC
    Value: !Join [",", [!Ref publicSubnet1, !Ref publicSubnet2, !Ref publicSubnet3, !Ref publicSubnet4, !Ref publicSubnet5, !Ref publicSubnet6]]

  VPCPrivateSubnets:
    Description:  The list of private subnets in the VPC
    Value: !Join [",", [!Ref privateSubnet1, !Ref privateSubnet2, !Ref privateSubnet3]]

...

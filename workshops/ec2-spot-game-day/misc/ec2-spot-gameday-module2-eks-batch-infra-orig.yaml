AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template for deploying an ECS environment for handling
  batch workloads. The CloudFormation template creates an input and an output S3
  bucket. Objects uploaded to the input S3 bucket creates an event that is put
  in a SQS queue. The ECS task contains a Docker container that pulls messages
  from the queue, reads the content and downloads the corresponding object from
  the S3 bucket. The Docker container then transforms the object and uploads it
  to the output S3 bucket. In this example template we are using images, in jpg
  format, to showcase the batch workload ECS architecture. Upload images with a
  .jpg suffix in the input S3 bucket to trigger the event.

Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com

Resources:
  SQSBatchQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:  !Sub "${AWS::StackName}-SQSBatchQueue"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt
          - SQSDeadLetterQueue
          - Arn
        maxReceiveCount: '5'

  SQSBatchQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: MySQSBatchQueuePolicy
        Statement:
          - Sid: Allow-send-message-from-S3
            Effect: Allow
            Principal: '*'
            Action: 'SQS:SendMessage'
            Resource: !GetAtt
              - SQSBatchQueue
              - Arn
            Condition:
              ArnLike:
                'aws:SourceArn': !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref myS3InputBucket
      Queues:
        - !Ref SQSBatchQueue
  SQSDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName:  !Sub "${AWS::StackName}-SQSDeadLetterQueue"
  myS3InputBucket:
    Type: 'AWS::S3::Bucket'
  myS3OutputBucket:
    Type: 'AWS::S3::Bucket'

  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-NodeInstanceRole'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
      Path: /

  PolicyS3ObjectAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'sqs:ListQueues'
              - 'sqs:GetQueueUrl'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'sqs:DeleteMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:ChangeMessageVisibility'
            Resource: !GetAtt
              - SQSBatchQueue
              - Arn
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref myS3OutputBucket
                - /*
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyS3ObjectAccess'
      Roles:
        - !Ref NodeInstanceRole

Outputs:

  AWSRegion:
    Description: AWSRegion
    Value: !Ref 'AWS::Region'

  SQSDeadLetterQueue:
    Description: SQSDeadLetterQueue
    Value: !Ref SQSDeadLetterQueue

  SQSBatchQueue:
    Description: >-
      The SQS queue that is used to hold messages containing the name of the
      uploaded objects
    Value: !Ref SQSBatchQueue
  InputBucket:
    Description: The S3 bucket where images can be uploaded to
    Value: !Ref myS3InputBucket
  OutputBucket:
    Description: The S3 bucket holding the resized images and thumbnails
    Value: !Ref myS3OutputBucket
  NodeInstanceRole:
    Description: NodeInstanceRole
    Value: !Ref NodeInstanceRole

---
AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Fleet Template
Metadata:
  Author:
    Description: Jayaprakash Alawala <jalawala@amazon.com>
  License:
    Description: 'Copyright 2020 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'



Parameters:

  RetainPrivateIP:
    Type: String
    Description: "Enter YES or NO to enable or disable the RetainPrivateIP feature"
    Default: "YES"

  S3BucketName:
    Type: String
    Description: "Name of the S3 Bucket Where the lambda function xip file exists"
    Default: "ec2spotstatefulworkload2"

  S3Key:
    Type: String
    Description: "The Object Name in the S3 Bucket Where the lambda function xip file exists"
    Default: "lambda_function.zip"

  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh/http access and load balancer http
      access
    Type: String

  InstanceTypes:
    Type: String
    Description: "multiple spot instances to override(seperated by comma)"
    Default: "m4.large,m5.large,c4.large,c5.large,r4.large,r5.large,t3.large,t3a.large"


  OnDemandTargetCapacity:
    Type: Number
    Description: "on-demand  capacity"
    Default: 2

  SpotTargetCapacity:
    Type: Number
    Description: "Spot Capacity"
    Default: 2

  TotalTargetCapacity:
    Type: Number
    Description: "Total Capacity"
    Default: 4

  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: '10'
    MinValue: '10'
    MaxValue: '10000'
    ConstraintDescription: must be between 5 and 10000

  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: '10'
    MinValue: '10'
    MaxValue: '10000'
    ConstraintDescription: must be between 5 and 10000

  RootEBSVolumeSize:
    Type: Number
    Description: "Root EBS Volume Size"
    Default: 8

  AdditionalEBSVolume1Size:
    Type: Number
    Description: "Additional EBS Volume1 Size"
    Default: 8

  AdditionalEBSVolume2Size:
    Type: Number
    Description: "Additional EBS Volume2 Size"
    Default: 8

  AMAZONLINUX2AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2


Resources:

  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - vpc

  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - vpc
      - internetGateway
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc


  publicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicSubnet1'
      VpcId: !Ref vpc

  publicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicSubnet2'
      VpcId: !Ref vpc

  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-privateSubnet1'
      VpcId: !Ref vpc


  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-privateSubnet2'
      VpcId: !Ref vpc

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - vpc
      - attachGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-publicRouteTable'
      VpcId: !Ref vpc

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    DependsOn: vpc
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTablePrivate'

  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet1
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - publicRouteTable
      - publicSubnet2
      - attachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2


  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet1
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet1

  privateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - RouteTablePrivate
      - privateSubnet2
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref privateSubnet2



  EIPNATGateway:
    Type: AWS::EC2::EIP
    DependsOn:
      - attachGateway
      - vpc
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - publicSubnet1
    Properties:
      AllocationId: !GetAtt EIPNATGateway.AllocationId
      SubnetId: !Ref publicSubnet1

  publicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - publicRouteTable
      - internetGateway
      - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

  privateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - RouteTablePrivate
      - NATGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref RouteTablePrivate

  loadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - vpc
    Properties:
      GroupDescription: Allow http (80)
      GroupName: !Sub '${AWS::StackName}-loadBalancerSecurityGroup'
      SecurityGroupIngress:
        - CidrIp: !Ref sourceCidr
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref vpc

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - loadBalancerSecurityGroup
      - publicSubnet1
      - publicSubnet2
    Properties:
      Name: !Sub '${AWS::StackName}-ALB'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref loadBalancerSecurityGroup
      Subnets:
        - !Ref publicSubnet1
        - !Ref publicSubnet2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - vpc
    Properties:
      HealthCheckIntervalSeconds: 50
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Sub '${AWS::StackName}-TargetGroup'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId: !Ref vpc

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ALB
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


  instanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-InstanceRole'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-EC2DescribeInstances'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:DescribeInstances
                Resource: "*"

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - instanceRole
    Properties:
      InstanceProfileName:  !Sub '${AWS::StackName}-InstanceProfile'
      Path: /
      Roles:
        - Ref: instanceRole

  instanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - CidrIp:
            Ref: sourceCidr
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp:
            Ref: sourceCidr
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      GroupDescription: Allow traffic from Internet
      GroupName:  !Sub '${AWS::StackName}-InstanceSG'
      VpcId: !Ref vpc

  LaunchTemplate:
    DependsOn:
      - instanceProfile
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.large
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'false'
              VolumeSize: !Ref RootEBSVolumeSize
          - DeviceName: /dev/xvdb
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'false'
              VolumeSize: !Ref AdditionalEBSVolume1Size
          - DeviceName: /dev/xvdc
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'false'
              VolumeSize: !Ref AdditionalEBSVolume2Size
        ImageId: !Ref AMAZONLINUX2AMI
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: "EC2FleetLT"

        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y

            sudo yum -y install python3 python3-wheel python-pi

            cat <<EOF > requirements.txt
            Flask==0.10.1
            Flask-Cors==1.10.2
            requests
            boto3
            EOF

            sudo pip3 install -r requirements.txt


            cat <<EOF > app.py
            from flask import Flask, render_template
            from flask.ext.cors import CORS, cross_origin
            import os
            import requests
            import json
            import time
            import sys
            import boto3
            import datetime

            app = Flask(__name__)
            cors = CORS(app)
            app.config['CORS_HEADERS'] = 'Content-Type'

            URL = "http://169.254.169.254/latest/dynamic/instance-identity/document"
            InstanceData = requests.get(URL).json()

            @app.route('/')
            @cross_origin()
            def index():

              response = ""
              response +="<head> <title>Ec2 Spot Stateful Workload</title> </head>"
              response += "<h2>Here is the status of the all the EBS volumes on this EC2 instance </h2> <hr/>"

              try:
                URL = "http://169.254.169.254/latest/meta-data/spot/termination-time"
                SpotInt = requests.get(URL)
                if SpotInt.status_code == 200:
                  response += "<h1>This Spot Instance Got Interruption and Termination Date is {} </h1> <hr/>".format(SpotInt.text)


                v1 = open('/home/ec2-user/volume1/state.txt', 'r')
                v2 = open('/home/ec2-user/volume2/state.txt', 'r')
                v3 = open('/home/ec2-user/volume3/state.txt', 'r')

                response += "<h3>Status of Volume1 </h3> <hr/>"
                for x in v1:
                  response += "<li>{}</li>".format(x)

                #response += v1.read()
                response += "<h3>Status of Volume2 </h3> <hr/>"
                for x in v2:
                  response += "<li>{}</li>".format(x)
                #response += v2.read()
                response += "<h3>Status of Volume3 </h3> <hr/>"
                for x in v3:
                  response += "<li>{}</li>".format(x)
                #response += v3.read()
                v1.close()
                v2.close()
                v3.close()

              except Exception as inst:
                response += "<li>Oops !!! Failed to access my instance  metadata with error = {}</li>".format(inst)

              return response

            def mountVolumes():

              os.system("mkdir -p /home/ec2-user/volume1")
              os.system("mkdir -p /home/ec2-user/volume2")
              os.system("mkdir -p /home/ec2-user/volume3")

              os.system("sudo mkfs -t xfs /dev/xvdb")
              os.system("sudo mount /dev/xvdb /home/ec2-user/volume2")

              os.system("sudo mkfs -t xfs /dev/xvdc")
              os.system("sudo mount /dev/xvdc /home/ec2-user/volume3")

              instanceId = InstanceData['instanceId']

              ec2client = boto3.client('ec2', region_name=InstanceData['region'])
              describeInstance = ec2client.describe_instances(InstanceIds=[instanceId])
              instanceData=describeInstance['Reservations'][0]['Instances'][0]
              if 'InstanceLifecycle' in instanceData.keys():
                lifecycle = instanceData['InstanceLifecycle']
              else:
                lifecycle =  "Ondemand"


              instance_type = InstanceData['instanceType']
              privateIp = InstanceData['privateIp']
              availability_zone = InstanceData['availabilityZone']
              Region = InstanceData['region']

              publicIpV4 = requests.get("http://169.254.169.254/latest/meta-data/public-ipv4")
              publicIp = publicIpV4.text

              AMIId = requests.get("http://169.254.169.254/latest/meta-data/ami-id")
              AMI = AMIId.text

              v1 = open('/home/ec2-user/volume1/state.txt', 'a')
              v2 = open('/home/ec2-user/volume2/state.txt', 'a')
              v3 = open('/home/ec2-user/volume3/state.txt', 'a')

              current_time = datetime.datetime.now()
              header = "current_time                 InstanceId             privateIp    publicIp        instance_type     AZ        \n"
              value = str(current_time)+"  "+instanceId+"  "+privateIp   +"  "+ publicIp +"   "+instance_type+"  "+availability_zone+"\n"

              v1.write(header)
              v1.write(value)
              v1.close()
              v2.write(header)
              v2.write(value)
              v2.close()
              v3.write(header)
              v3.write(value)
              v3.close()

            if __name__ == '__main__':
              print("Starting A Simple Web Service ...")
              mountVolumes()
              app.run(port=80,host='0.0.0.0')
            EOF

            sudo python3 app.py
      LaunchTemplateName: !Sub '${AWS::StackName}-LT'

  InstanceStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: InstanceId
          AttributeType: S
        - AttributeName: ST
          AttributeType: S
      BillingMode: PROVISIONED
      KeySchema:
        - AttributeName: InstanceId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref 'ReadCapacityUnits'
        WriteCapacityUnits: !Ref 'WriteCapacityUnits'
      TableName:  !Sub '${AWS::StackName}-InstanceStateTable'
      Tags:
        - Key: Name
          Value: 'InstanceStateTable'
      GlobalSecondaryIndexes:
        - IndexName: 'ST-Global-Index'
          KeySchema:
            - AttributeName: ST
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref 'ReadCapacityUnits'
            WriteCapacityUnits: !Ref 'WriteCapacityUnits'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-dynamodbAccessRole'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
        - PolicyName: !Sub '${AWS::StackName}-ec2fleetAccessRole'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AdministratorAccess

  InitFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Description: 'This function initializes the DynamoDB table with Instance ID status'
      FunctionName: !Sub '${AWS::StackName}-InitFunction'
      Environment:
        Variables:
          DYNAMODB_INSTANCEID_TABLE_NAME: !Sub '${AWS::StackName}-InstanceStateTable'
          DYNAMODB_GSI_ST: 'ST-Global-Index'
          LAUNCH_TEMPLATE_ID: !Ref LaunchTemplate
          ROOT_EBS_VOLUME_SIZE: !Ref RootEBSVolumeSize
          ADDITIONAL_VOLUM1_SIZE: !Ref AdditionalEBSVolume1Size
          ADDITIONAL_VOLUM2_SIZE: !Ref AdditionalEBSVolume2Size
          INSTANCE_TYPES_LIST: !Ref InstanceTypes
          PUBLIC_SUBNET_IDs_LIST: !Join [",", [!Ref publicSubnet1, !Ref publicSubnet2]]
          PRIVATE_SUBNET_IDs_LIST: !Join [",", [!Ref privateSubnet1, !Ref privateSubnet2]]
          ONDEMANDTARGETCAPACITY: !Ref OnDemandTargetCapacity
          SPOTTARGETCAPACITY: !Ref SpotTargetCapacity
          TOTALTARGETCAPACITY: !Ref TotalTargetCapacity
          RETAINPRIVATEIP: !Ref RetainPrivateIP
          TARGET_GROUP_ARN: !Ref TargetGroup
          VPC_ID: !Ref vpc
          AWSREGION: !Ref AWS::Region
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3Key
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: python3.7
      Timeout: 900

  InitializeDynamoDB:
    Type: Custom::InitFunction
    DependsOn:
      - InstanceStateTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName: !Ref InstanceStateTable
      Source: 'InitializeDynamoDB'

  CWTNodeTerminationEventRule:
    DependsOn:
      - InitFunction
    Properties:
      Description: Events rule for EC2 Instance State-change Notification Notices
      Name: !Sub '${AWS::StackName}-CWTNodeTerminationEventRule'
      EventPattern:
        detail:
          state:
            - shutting-down
        detail-type:
          - EC2 Instance State-change Notification
        source:
          - aws.ec2
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - InitFunction
              - Arn
          Id:
            Ref: InitFunction
    Type: AWS::Events::Rule

  lambdaFunctionPermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - InitFunction
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CWTNodeTerminationEventRule
          - Arn
    Type: AWS::Lambda::Permission

Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value: !Ref AWS::Region


  instanceProfile:
    Description: Instance profile ARN
    Value:
      Fn::GetAtt:
        - instanceProfile
        - Arn

  instanceSecurityGroup:
    Description: Instance security group
    Value: !Ref instanceSecurityGroup

  loadBalancerSecurityGroup:
    Description: Load Balancer security group
    Value: !Ref loadBalancerSecurityGroup

  vpc:
    Description: The VPC
    Value: !Ref vpc

  publicSubnet1:
    Description: Public subnet 1
    Value: !Ref publicSubnet1

  publicSubnet2:
    Description: Public subnet 2
    Value: !Ref publicSubnet2


  privateSubnet1:
    Description: Private subnet 1
    Value: !Ref privateSubnet1

  privateSubnet2:
    Description: Private subnet 2
    Value: !Ref privateSubnet2


  VPCPublicSubnets:
    Description:  The list of public subnets in the VPC
    Value: !Join [",", [!Ref publicSubnet1, !Ref publicSubnet2]]

  VPCPrivateSubnets:
    Description:  The list of private subnets in the VPC
    Value: !Join [",", [!Ref privateSubnet1, !Ref privateSubnet2]]

  ALBDNSName:
    Description: The Application Load Balancer
    Value: !GetAtt ALB.DNSName

  TargetGroup:
    Description: The Target Group
    Value: !Ref TargetGroup

  LaunchTemplate:
    Description: The Launch Template
    Value: !Ref LaunchTemplate

  InitFunction:
    Description: InitFunction
    Value: !Ref InitFunction

  InstanceStateTable:
    Description: InstanceStateTable
    Value: !Ref InstanceStateTable


...

---
AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Spot Game Day Template
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.0.0/24
    public-subnet-2:
      CIDR: 10.0.1.0/24
    public-subnet-3:
      CIDR: 10.0.2.0/24
    private-subnet-1:
      CIDR: 10.0.3.0/24
    private-subnet-2:
      CIDR: 10.0.4.0/24
    private-subnet-3:
      CIDR: 10.0.5.0/24
    vpc:
      CIDR: 10.0.0.0/16
Metadata:
  Author:
    Description: Jayaprakash Alawala <jalawala@amazon.com>
  License:
    Description: 'Copyright 2020 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'



Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'awsajp_keypair'
    MinLength: 1

  vpc:
    Type: String
    Description: "VPC used for testing"
    Default: "vpc-0b2cfd7b526d5b41a"

  Ec2SpotStatefulPublicSubnet1:
    Type: String
    Description: "Ec2SpotStatefulPublicSubnet1 used for testing"
    Default: "subnet-0c07359b41da1e17c"

  Ec2SpotStatefulPublicSubnet2:
    Type: String
    Description: "Ec2SpotStatefulPublicSubnet2 used for testing"
    Default: "subnet-01e89d5cc1b12f515"

  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh/http access and load balancer http
      access
    Type: String

  AMAZONLINUX2AMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2


Resources:

  instanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-InstanceRole'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: EC2DescribeInstances
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:DescribeInstances
                Resource: "*"

  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - instanceRole
    Properties:
      InstanceProfileName:  !Sub '${AWS::StackName}-InstanceProfile'
      Path: /
      Roles:
        - Ref: instanceRole

  instanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - CidrIp:
            Ref: sourceCidr
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp:
            Ref: sourceCidr
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      GroupDescription: Allow traffic from Internet
      GroupName:  !Sub '${AWS::StackName}-InstanceSG'
      VpcId: !Ref vpc

  LaunchTemplate:
    DependsOn:
      - instanceProfile
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.large
        KeyName : !Ref KeyName
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'false'
              VolumeSize: '8'
          - DeviceName: /dev/xvdb
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'false'
              VolumeSize: '8'
          - DeviceName: /dev/xvdc
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: 'false'
              VolumeSize: '8'
        ImageId: !Ref AMAZONLINUX2AMI
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: "Ec2SpotCassandra"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y

            sudo yum -y install python3 python3-wheel python-pi

            cat <<EOF > requirements.txt
            Flask==0.10.1
            Flask-Cors==1.10.2
            requests
            boto3
            EOF

            sudo pip3 install -r requirements.txt


            cat <<EOF > app.py
            from flask import Flask, render_template
            from flask.ext.cors import CORS, cross_origin
            import os
            import requests
            import json
            import time
            import sys
            import boto3
            import datetime

            app = Flask(__name__)
            cors = CORS(app)
            app.config['CORS_HEADERS'] = 'Content-Type'

            URL = "http://169.254.169.254/latest/dynamic/instance-identity/document"
            InstanceData = requests.get(URL).json()

            @app.route('/')
            @cross_origin()
            def index():

              response = ""
              response +="<head> <title>Ec2 Spot Stateful Workload</title> </head>"
              response += "<h2>Here is the status of the all the EBS volumes on this EC2 instance </h2> <hr/>"

              try:
                URL = "http://169.254.169.254/latest/meta-data/spot/termination-time"
                SpotInt = requests.get(URL)
                if SpotInt.status_code == 200:
                  response += "<h1>This Spot Instance Got Interruption and Termination Date is {} </h1> <hr/>".format(SpotInt.text)


                v1 = open('/home/ec2-user/volume1/state.txt', 'r')
                v2 = open('/home/ec2-user/volume2/state.txt', 'r')
                v3 = open('/home/ec2-user/volume3/state.txt', 'r')

                response += "<h3>Status of Volume1 </h3> <hr/>"
                for x in v1:
                  response += "<li>{}</li>".format(x)

                #response += v1.read()
                response += "<h3>Status of Volume2 </h3> <hr/>"
                for x in v2:
                  response += "<li>{}</li>".format(x)
                #response += v2.read()
                response += "<h3>Status of Volume3 </h3> <hr/>"
                for x in v3:
                  response += "<li>{}</li>".format(x)
                #response += v3.read()
                v1.close()
                v2.close()
                v3.close()

              except Exception as inst:
                response += "<li>Oops !!! Failed to access my instance  metadata with error = {}</li>".format(inst)

              return response

            def mountVolumes():

              os.system("mkdir -p /home/ec2-user/volume1")
              os.system("mkdir -p /home/ec2-user/volume2")
              os.system("mkdir -p /home/ec2-user/volume3")

              os.system("sudo mkfs -t xfs /dev/xvdb")
              os.system("sudo mount /dev/xvdb /home/ec2-user/volume2")

              os.system("sudo mkfs -t xfs /dev/xvdc")
              os.system("sudo mount /dev/xvdc /home/ec2-user/volume3")

              instanceId = InstanceData['instanceId']

              ec2client = boto3.client('ec2', region_name=InstanceData['region'])
              describeInstance = ec2client.describe_instances(InstanceIds=[instanceId])
              instanceData=describeInstance['Reservations'][0]['Instances'][0]
              if 'InstanceLifecycle' in instanceData.keys():
                lifecycle = instanceData['InstanceLifecycle']
              else:
                lifecycle =  "Ondemand"


              instance_type = InstanceData['instanceType']
              privateIp = InstanceData['privateIp']
              availability_zone = InstanceData['availabilityZone']
              Region = InstanceData['region']

              publicIpV4 = requests.get("http://169.254.169.254/latest/meta-data/public-ipv4")
              publicIp = publicIpV4.text

              AMIId = requests.get("http://169.254.169.254/latest/meta-data/ami-id")
              AMI = AMIId.text

              v1 = open('/home/ec2-user/volume1/state.txt', 'a')
              v2 = open('/home/ec2-user/volume2/state.txt', 'a')
              v3 = open('/home/ec2-user/volume3/state.txt', 'a')

              current_time = datetime.datetime.now()
              header = "current_time                 InstanceId             privateIp    publicIp        instance_type     AZ        \n"
              value = str(current_time)+"  "+instanceId+"  "+privateIp   +"  "+ publicIp +"   "+instance_type+"  "+availability_zone+"\n"

              v1.write(header)
              v1.write(value)
              v1.close()
              v2.write(header)
              v2.write(value)
              v2.close()
              v3.write(header)
              v3.write(value)
              v3.close()

            if __name__ == '__main__':
              print("Starting A Simple Web Service ...")
              mountVolumes()
              app.run(port=80,host='0.0.0.0')
            EOF

            sudo python3 app.py
      LaunchTemplateName: !Sub '${AWS::StackName}-LT'

  Ec2SpotStatefulSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  !Sub '${AWS::StackName}-SpotFleetRole'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /

  Ec2SpotStatefulSpotFleet:
    Type: AWS::EC2::SpotFleet
    DependsOn: LaunchTemplate
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: capacityOptimized
        IamFleetRole:
          Fn::GetAtt:
            - Ec2SpotStatefulSpotFleetRole
            - Arn
        LaunchTemplateConfigs:
          - LaunchTemplateSpecification:
              LaunchTemplateId: !Ref LaunchTemplate
              Version: !GetAtt LaunchTemplate.LatestVersionNumber
            Overrides:
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "m4.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "m5.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "c4.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "c5.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "r4.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "r5.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "t3a.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet1
                InstanceType: "t3.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "m4.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "m5.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "c4.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "c5.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "r4.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "r5.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "t3a.large"
                WeightedCapacity: 1
              - SubnetId: !Ref Ec2SpotStatefulPublicSubnet2
                InstanceType: "t3.large"
                WeightedCapacity: 1
        TargetCapacity: 1
        Type: request


Outputs:
  awsRegionId:
    Description: The AWS Region ID your template was launched in
    Value: !Ref AWS::Region


  instanceProfile:
    Description: Instance profile ARN
    Value:
      Fn::GetAtt:
        - instanceProfile
        - Arn

  instanceSecurityGroup:
    Description: Instance security group
    Value: !Ref instanceSecurityGroup


  vpc:
    Description: The VPC
    Value: !Ref vpc


  LaunchTemplate:
    Description: The Launch Template
    Value: !Ref LaunchTemplate

  Ec2SpotStatefulSpotFleet:
    Description: Ec2SpotStatefulSpotFleet
    Value: !Ref Ec2SpotStatefulSpotFleet

  Ec2SpotStatefulSpotFleetRole:
    Description: Ec2SpotStatefulSpotFleetRole
    Value: !Ref Ec2SpotStatefulSpotFleet


...
